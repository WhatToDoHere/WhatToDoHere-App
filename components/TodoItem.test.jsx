import { render, fireEvent, act, waitFor } from '@testing-library/react-native';
import TodoItem from './TodoItem';
import { getUserInfo } from '../services/firebaseService';

describe('TodoItem', () => {
  const mockTodo = {
    id: '1',
    title: 'Test Todo',
    completed: false,
    locationId: 'testLocation',
    assignedBy: 'friendUserId',
  };

  const mockOnCheckBoxToggle = jest.fn();

  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('Ìï† Ïùº Ìï≠Î™©ÏùÑ Ïò¨Î∞îÎ•¥Í≤å Î†åÎçîÎßÅÌï©ÎãàÎã§.', async () => {
    const { getByText } = render(
      <TodoItem todo={mockTodo} onCheckBoxToggle={mockOnCheckBoxToggle} />,
    );
    await waitFor(() => {
      expect(getByText('Test Todo')).toBeTruthy();
    });
  });

  it('Ï≤¥ÌÅ¨Î∞ïÏä§ ÌÅ¥Î¶≠ Ïãú Ìï† Ïùº ÏôÑÎ£å Ïó¨Î∂ÄÎ•º ÌÜ†Í∏ÄÌï©ÎãàÎã§.', async () => {
    const { getByTestId } = render(
      <TodoItem todo={mockTodo} onCheckBoxToggle={mockOnCheckBoxToggle} />,
    );

    await act(async () => {
      fireEvent.press(getByTestId('checkbox'));
    });

    expect(mockOnCheckBoxToggle).toHaveBeenCalledWith('1', true);
  });

  it('Îã§Î•∏ ÏÇ¨Ïö©ÏûêÍ∞Ä Ìï†ÎãπÌïú Í≤ΩÏö∞ Ìï¥Îãπ ÏÇ¨Ïö©ÏûêÏùò Ïù¥Î¶ÑÏùÑ Í∞ÄÏ†∏ÏôÄ ÌëúÏãúÌï©ÎãàÎã§.', async () => {
    getUserInfo.mockResolvedValue({ name: 'Test Friend' });

    const { getByText } = render(
      <TodoItem todo={mockTodo} onCheckBoxToggle={mockOnCheckBoxToggle} />,
    );

    await waitFor(() => {
      expect(getByText('‚úçüèª Test Friend')).toBeTruthy();
    });
  });

  it('ÏπúÍµ¨ Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏Ïò¨ Ïàò ÏóÜÏùÑ Îïå "Ïïå Ïàò ÏóÜÎäî ÏÇ¨Ïö©Ïûê"Î°ú ÌëúÏãúÌï©ÎãàÎã§.', async () => {
    getUserInfo.mockResolvedValue(null);

    const { getByText } = render(
      <TodoItem todo={mockTodo} onCheckBoxToggle={mockOnCheckBoxToggle} />,
    );

    await waitFor(() => {
      expect(getByText('‚úçüèª Ïïå Ïàò ÏóÜÎäî ÏÇ¨Ïö©Ïûê')).toBeTruthy();
    });
  });

  it('ÏπúÍµ¨ Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞Ïóê Ïò§Î•òÍ∞Ä Î∞úÏÉùÌïòÎ©¥ "ÏÇ≠Ï†úÎêú Í≥ÑÏ†ï"ÏúºÎ°ú ÌëúÏãúÌï©ÎãàÎã§.', async () => {
    getUserInfo.mockRejectedValue(new Error('Test error'));

    const { getByText } = render(
      <TodoItem todo={mockTodo} onCheckBoxToggle={mockOnCheckBoxToggle} />,
    );

    await waitFor(() => {
      expect(getByText('‚úçüèª ÏÇ≠Ï†úÎêú Í≥ÑÏ†ï')).toBeTruthy();
    });
  });
});
